#!/usr/bin/env bash
#-------------------------------------------------------
# Written by Erik Poupaert
# Phnom Penh, Cambodia, May 2013
# Licensed under the General Public License (GPL)
#-------------------------------------------------------
source "$UTIL_FOLDER/msb.debug"
source "$UTIL_FOLDER/field.required.validate"

domain=$($THIS_SCRIPT file.field domain name -show)

field_required_validate domain name "$domain"

domain_root_pwd=$($THIS_SCRIPT file.field domain root_pwd -show)
field_required_validate domain root_pwd "${domain_root_pwd}"

domain_user_name=$($THIS_SCRIPT file.field domain user_name -show)
field_required_validate domain user_name "${domain_user_name}"

domain_user_pwd=$($THIS_SCRIPT file.field domain user_pwd -show)
field_required_validate domain user_pwd "${domain_user_pwd}"

ssh-man remote-account root@$domain -set-pwd "${domain_root_pwd}"
ssh-man remote-account root@$domain -link
if [ $? -ne 0 ] ; then
        echo "ERROR: invalid root_pwd for domain" >&2
        ssh-man remote-account root@$domain -delete-pwd
        exit 1
fi

#remember original owner.group of ssh folder
if [ ! $USER = 'root' ] ; then
	origUser=$(stat -c '%U' $HOME/.ssh)
	origGroup=$(stat -c '%G' $HOME/.ssh)
fi

ssh-man remote-account root@$domain -delete-pwd

#if [ $(deb-publish-root server root@$domain -check-if-installed) = 'no' ] ; then
        deb-publish-root server root@$domain -install
#fi

if [ $(deb-publish-root server.vhost root@$domain $domain -exists) = 'no' ] ; then
        deb-publish-root server.vhost root@$domain $domain \
                    -create-with-user ${domain_user_name} "${domain_user_pwd}"
fi

ssh-man remote-account ${domain_user_name}@$domain -set-pwd "${domain_user_pwd}"
ssh-man remote-account ${domain_user_name}@$domain -link
ssh-man remote-account ${domain_user_name}@$domain -delete-pwd

#put back the original user/group
if [ ! $USER = 'root' ] ; then
	chown -R $origUser.$origGroup $HOME/ssh
fi

